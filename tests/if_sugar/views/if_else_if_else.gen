<template>
    <component name="IfElseIfElse" spacing="12.0">
        <label :if="is_a()" text="'Vis A'"></label>
        <label :else_if="is_b()" text="'Vis B'"></label>
        <label else text="'world'"></label>
        <button @clicked="next_vis()"></button>
    </component>
</template>

<script>
#[component]
pub struct IfElseIfElse{
    vis: Vis
}

// init prop
impl Default for IfElseIfElse{
    fn default() -> Self{
        Self{
            vis: Vis::A,
        }
    }
}

impl IfElseIfElse{
    #[computed([vis])]
    fn is_a(&self) -> bool{
        self.vis.is_a()
    }
    #[computed([vis])]
    fn is_b(&self) -> bool{
        self.vis.is_b()
    }
    fn next_vis(&mut self) ->(){
        if self.vis.is_a(){
            self.set_vis(Vis::B);
        }else if self.vis.is_b(){
            self.set_vis(Vis::C);
        }else{
            self.set_vis(Vis::A);
        }
    }
}

#[prop]
#[derive(Default, Clone, Copy, Debug)]
pub enum Vis{
    #[default]
    A,
    B,
    C
}

impl Vis{
    pub fn is_a(&self) -> bool{
        matches!(self, Vis::A)
    }
    pub fn is_b(&self) -> bool{
        matches!(self, Vis::B)
    }
    pub fn is_c(&self) -> bool{
        matches!(self, Vis::C)
    }
}
</script>
